<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script type="text/javascript" src="https://d3js.org/d3.v4.js"></script>
</head>
<style>
    #label {
        width:900px;
        height: 50px;
        float: left;
        border-style:   solid;
        border-width:   2px;
        border-color: rgba(0, 0, 0, 0.51);
        text-align: center;
    }
    #sideBar {
        width:300px;
        min-height:300px;
        left: 910px;
        top: 0px;
        position: fixed;
        border-style:   solid;
        border-width:   2px;
        border-color: rgba(0, 0, 0, 0.51);
    }
    #can {
        min-height:100px;
        width:900px;
        border-style :   solid;
        border-width:   2px;
        border-color: rgba(0, 0, 0, 0.51);
        float: left;
    }
    #detail {
        min-height:800px;
        width:900px;
        float: left;
        clear: both;
        border-style :   solid;
        border-width:   2px;
        border-color: rgba(0, 0, 0, 0.51);
        font-weight: bold;
    }
    .labels{
        font-weight: bold;
        text-anchor: middle;
    }
    .nodes {
        fill: #1a44de;
        opacity: 0.1;
        border-collapse: separate;
    }
    .nodes:hover{
        stroke: red;
        fill : #ff876a;
        stroke-width: 5px;
    }
    .lineArrows{
        overflow: hidden;
    }
    .nodeLabels{
        text-anchor: middle;
        text-align: center;
    }
    .button{
    }
    div.tooltip {
        box-sizing: border-box;
        position: absolute;
        text-align: center;
        width: border-box;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
</style>
<div id="label"></div>
<div id="sideBar"></div>
<div id="can"></div>
<div id="detail"></div>
<svg width="1500" height="1500">
    <defs>
        <marker
                id="arrow"
                markerUnits="strokeWidth"
                markerWidth="8"
                markerHeight="12"
                viewBox="0 0 12 12"
                refX="10"
                refY="6"
                orient="auto">
            <path d="M2,2 L10,6 L2,10 L6,6 L2,2" style="fill: #220721;"></path>
        </marker>
    </defs>

    <!-- <line x1="0" y1="0" x2="200" y2="50"  stroke="red" stroke-width="2" marker-end="url(#arrow)"/> -->

    <!-- <path d="M20,70 T80,100 T160,80 T200,90" fill="white" stroke="red" stroke-width="2" marker-start="url(#arrow)" marker-mid="url(#arrow)" marker-end="url(#arrow)"/> -->
</svg>

<body>
<script>
    var sideBarWidth = 300;
    var sideBarHeight = 300;
    var labelHeigth = 50;
    var labelWidth = 900;
    var canvasHeight = 100;
    var canvasWidth = labelWidth;
    var detailHeight = 910;
    var detailWidth = labelWidth;
    var nodeWidth = 60;
    var nodeSpace = nodeWidth;
    var nodesPerRow = 7;// for square nodes of width nodeWidth=60 -> (canvas width - margins) / 60 = 7
    var nodeMargin = (canvasWidth - (nodesPerRow * nodeWidth) - ((nodesPerRow - 1) * nodeSpace)) / 2 ;
    var div = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);
    var Margin = 25;//margin from all sides of panel
    var XYsideBarImage = 250;// x and y value of images shown in side bar
    var label = d3.select("body").select("#label").append("svg").attr("width", labelWidth).attr("height", labelHeigth);
    var sideBar = d3.select("body").select("#sideBar").append("svg").attr("width", sideBarWidth).attr("height", sideBarHeight);
    var canvas = d3.select("body").select("#can").append("svg").attr("width", canvasWidth).attr("height", canvasHeight);
    var detailForm = d3.select("body").select("#detail").append("form").attr("width", 900).attr("height", 50);
    var detail = d3.select("body").select("#detail").append("svg").attr("width", detailWidth).attr("height", detailHeight);
    var myData;
    var numLayers;
    var numRows;
    var rowHeight = nodeWidth + (Margin * 2);
    var xCoord = new Array();
    var yCoord = new Array();
    var path = "http://35.163.48.45:8888/laskaactivations/";

    console.log("{{{dataFileName}}}")
    d3.json("{{{dataFileName}}}", function(error, data) {
        if (error) {  //If error is not null, something went wrong.
            console.log(error);  //Log the error.
        }
        myData = data;
        
        draw(myData, 0);
    });















    function draw(d, i){
       numLayers = String(myData[0].Children.length);
        for (index = 0; index <  numLayers; index++){
            var node_ = myData[0].Children[index];
            if(node_.Input == null){
                var input = 0;
                var output = 0;
                switch (node_.Name.substring( 0 , 2 )){
                    case 'co':
                        if( node_.NumFilters.constructor === Array){
                            for (n = 0; n < node_.NumFilters.length; n++ ){
                                input = node_.NumChannels[n] + input;
                                output = node_.NumFilters[n] + output;
                            }
                        } else {
                            input = node_.NumChannels;
                            output = node_.NumFilters;
                        }
                        node_.Input = input;
                        node_.Output = output;
                        break;
                    case 're':
                        var tempInd = index - 1 ;
                        while ( myData[0].Children[tempInd].Output == null){
                            tempInd --;
                        }
                        node_.Input = node_.Output = myData[0].Children[tempInd].Output;
                        break;
                    case 'no':
                        var tempInd = index - 1 ;
                        while ( myData[0].Children[tempInd].Input == null){
                            tempInd --;
                        }
                        node_.Input = node_.Output = myData[0].Children[tempInd].Output;
                        break;
                    case 'po':
                        var tempInd = index - 1 ;
                        while ( myData[0].Children[tempInd].Input == null){
                            tempInd --;
                        }
                        node_.Input = node_.Output = myData[0].Children[tempInd].Output;
                        break;
                    case 'dr':
                        var tempInd = index - 1 ;
                        while ( myData[0].Children[tempInd].Input == null){
                            tempInd --;
                        }
                        node_.Input = node_.Output = myData[0].Children[tempInd].Output;
                        break;
                    case 'pr':
                        var tempInd = index - 1 ;
                        while ( myData[0].Children[tempInd].Input == null){
                            tempInd --;
                        }
                        node_.Input = node_.Output = myData[0].Children[tempInd].Output;
                        break;
                    case 'ou':
                        node_.Input = myData[0].Children[index -1].Output;
                        break;
                }
            }
        }




        //*********************************-All code for Labels Panel-*********************************
        //labels in label area "Network Name" + "Number of Layers"
        label.selectAll("text")
                .data([myData[0]])
                .enter()
                .append("text")
                .attr("class", "labels")
                .attr("x", (labelWidth / 2))
                .attr("y", 30)
                .text(function (d) {
                    var tag1 = "Network Name: ";
                    var tag2 = "Number of Layers: ";
                    return tag1 + d.NetworkName +
                            '\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0' +
                            '\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0'+
                            tag2 + String(numLayers); });
        //*********************************-All Code for Canvas panel-*********************************
        



        var numRows = Math.ceil(numLayers / nodesPerRow);
        canvasHeight = numRows * rowHeight;
        canvas.attr("height", canvasHeight);
        // Calculating the x , y coordinates of nodes to be drawng
        for (index = 0; index < numLayers; index++){
            xCoord[index] = nodeMargin + (index % nodesPerRow) * nodeWidth + (index % nodesPerRow) * nodeSpace;
            yCoord[index] = Margin + Math.floor(index /  nodesPerRow) * rowHeight;
        }
        canvas.append("g").selectAll("path")
                .data(myData[0].Children.filter(function(d,i) {
                    return d.Name != "output";
                }))
                .enter()
                .append("path")
                .attr("class", "lineArrows")
                .attr("d", calculatePath)
                .attr("fill","white")
                .attr("stroke","blue")
                .attr("stroke-width",2)
                .attr("marker-end","url(#arrow)");



        canvas.selectAll("text").remove();
        canvas.append("g").selectAll("text")
                .data(myData[0].Children)
                .enter()
                .append("text")
                .attr("class", "nodeLabels")
                .attr("x", function (d, i) {
                    return xCoord[i] + (nodeWidth / 2);
                })
                .attr("y", function (d, i) {
                    return yCoord[i] + (nodeWidth / 2);
                })
                .text(function (d) { 
                    //hshere
                    var count = 0;
                    if(d.Children){
                        d.Children.forEach(function(d) {
                            if(d.good){
                                count = count + d.good;
                            }
                        });
                    }
                    
                    
                    var k =  d.Name + ":" + count;
                    return k;
                });
        canvas.append("g").selectAll("rect")
                .data(myData[0].Children)
                .enter()
                .append("rect")
                .attr("class", "nodes")
                .attr("x", function (d,i) {
                    return xCoord[i];
                })
                .attr("y", function (d,i) {
                    return yCoord[i];
                })
                .attr( "height", nodeWidth)
                .attr( "width", nodeWidth)
                .attr("rx", 15)
                .attr("ry", 15)
                .on("click", function (d) {
                    
                    d3.selectAll(".nodes").attr("fill", null);
                    d3.selectAll(".nodes").attr("fill", "#1a44de");
                    
                    sideBar.selectAll(".layerInfo")
                            .remove();

                    d3.select(this).attr("fill", null);
                    d3.select(this).attr("fill", "");
                    
                    sideBar.append("text")
                            .attr("class", "layerInfo")
                            .attr("x", 0)
                            .attr("y", 2 * Margin + XYsideBarImage)
                            .text("Selected Layer: " + d.Name);
                    
                    showDetail(d);
                });
        canvas.append("g").selectAll("text")
                .data(myData[0].Children.filter(function(d,i) {
                    return d.Name != "data";
                    }))
                .enter()
                .append("text")
                .attr("class", "pathLabels")
                .attr("x", function (d, i) {
                   return xCoord[i + 1] - (nodeSpace / 2);
                })
                .attr("y", function (d, i) {
                    return yCoord[i + 1] + nodeWidth / 2 - 2;
                })
                .text(function (d) { return d.Input})
                .attr("text-anchor", "middle");
        //*********************************-All code for sideBar Panel-*********************************
        // add the input image to the sideBar
        sideBar.append("svg:image")
                .attr("class", "panel")
                .attr("xlink:href",  function(d) { return path +"laska.png";})
                .attr("x", Margin)
                .attr("y", Margin)
                .attr("height", XYsideBarImage)
                .attr("width",  XYsideBarImage);
        sideBar.append("text")
                .attr("class", "labels")
                .attr("x", sideBarWidth / 2)
                .attr("y", Margin - 5)
                .text("Input Image")
                .attr("text-anchor", "middle");
    }














    function showDetail(d,i) {
        var path;
        var numFilters = d.Children.length;
        var filtersPerRow = Math.ceil( Math.sqrt(numFilters) );//square of this number is the number of mini squares we have
        var filterWidth = detailWidth / filtersPerRow;
        var path = "http://35.163.48.45:8888/laskaback/";
        sideBar.attr("height", sideBarHeight * 3 - 35);
        if (!d.Children){return;}//DON'T Show anything if there is no filters
        //remove all the buttons and filters in detail panel
        detail.selectAll(".filters")
                .remove();
        detailForm.selectAll(".button")
                .remove();
        // add two radio buttons for each of the m
        detailForm.append('label')
                .attr("class", "button")
                .html('Guided Back Propagation');
        detailForm.append('input')
                .attr("class", "button")
                .attr("checked", "checked")
                .attr('type', 'radio')
                .attr('name', 'toggle')
                .on('click', function () {
                    //Do something
                    path = "http://35.163.48.45:8888/laskaback/";
                    detail.selectAll(".filters")
                            .attr("xlink:href",  function(d) { return path + d.img;});
                });
        detailForm.append('label')
                .attr("class", "button")
                .html('<br>Maximum Forward Activation');
        detailForm.append('input')
                .attr("class", "button")
                .attr('type', 'radio')
                .attr('name', 'toggle')
                .on('click', function () {
                    //Do something
                    path = "http://35.163.48.45:8888/laskaactivations/";
                    detail.selectAll(".filters")
                            .attr("xlink:href",  function(d) { return path + d.img;});
                });
        detail.selectAll("img")
                .data(d.Children)
                .enter()
                .append("svg:image")
                .attr("class", "filters")
                .attr("name", "image")
                .attr("xlink:href",  function(d) { return path + d.img;})
                .attr("x", function (d, i) { return ( i % filtersPerRow) * filterWidth})
                .attr("y", function (d, i) { return (10 + Math.floor( i / filtersPerRow) * filterWidth )})
                .attr("height", (filterWidth - filterWidth * 0.01))
                .attr("width",  (filterWidth - filterWidth * 0.01))
                .attr("stroke-width", 2)
                .attr("stroke", "white")
                .on("mouseover", function(d) {
                    var imageName = d.img;
                    var filterID = d.id;
                    sideBar.append("text")
                            .attr("class", "tooltip")
                            .attr("x", XYsideBarImage/2 + Margin)
                            .attr("y", 2 * Margin + XYsideBarImage)
                            .text("Selected Filter: " + d.id);
                    sideBar.selectAll("img")
                            .data([d])
                            .enter()
                            .append("svg:image")
                            .attr("class", "tooltip")
                            .attr("xlink:href",  function(d) { return path + imageName;})
                            .attr("x", Margin)
                            .attr("y", XYsideBarImage + Margin * 3)
                            .attr("height", XYsideBarImage)
                            .attr("width",  XYsideBarImage);
                    sideBar.append("svg:image")
                            .attr("class", "tooltip")
                            .attr("xlink:href",  function(d) {
                                if(path == "http://35.163.48.45:8888/laskaback/"){
                                    var path_ = "http://35.163.48.45:8888/laskaactivations/";
                                } else {
                                    path_ = "http://35.163.48.45:8888/laskaback/";
                                }
                                return path_ + imageName;})
                            .attr("x", Margin)
                            .attr("y", 2 * (XYsideBarImage) + 4 * Margin)
                            .attr("height", XYsideBarImage)
                            .attr("width",  XYsideBarImage);
                })
                .on("mouseout", function(d) {
                    div.transition()
                            .duration(500)
                            .style("opacity", 0);
                    var offscreen = sideBar.selectAll(".tooltip")
                            .remove();
                })
                .on("click", function (d) {
                    d.good = 1;

                    if(d.bad){
                        d.bad = 0;
                    }

                    draw(d);
                })
                .on("dblclick", function (d) {
                    //hshere
                    //store annotations
                    d.bad = 1;

                    if(d.good){
                        d.good=0;
                    }

                    draw(d);
                });
    }













    function calculatePath (d, i) {
        //dynamically calculating the path from one node to another
        var arrowOffset = nodeWidth + Margin;
        if ( ( (i + 1) % nodesPerRow) == 0 && (i + 1) / nodesPerRow > 0){
            return ( "M" + (xCoord[i] + nodeWidth) + "," +(yCoord[i] + nodeWidth / 2) +
            "C" + (xCoord[i] + nodeWidth + nodeWidth / 3) + " " + (yCoord[i] + nodeWidth / 2) + "," +
            (xCoord[i] + nodeWidth + nodeWidth / 3) + " " + (arrowOffset + yCoord[i]) + "," +
            (xCoord[i] + nodeWidth) + " " + (arrowOffset + yCoord[i]) +
            "L" + nodeMargin + "," + (arrowOffset + yCoord[i]) +
            "C" + nodeMargin / 2 + " " + (arrowOffset + yCoord[i]) + "," +
            nodeMargin / 2 + " " + (arrowOffset + yCoord[i] + nodeWidth / 2) + ","+
            (xCoord[i +1 ]) + " " +(yCoord[i +1 ] + nodeWidth / 2));
        }  else {
            return ("M" + (xCoord[i] + nodeWidth) + "," +(yCoord[i] + nodeWidth / 2) +
                    "L" + xCoord[i + 1] + "," + (yCoord[i + 1] + nodeWidth / 2));
        }
    }
</script>

</body>
</html>